import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  // User subscriptions for MetroSpace tiers
  subscriptions: defineTable({
    userId: v.string(),
    tier: v.union(
      v.literal("startup"),
      v.literal("business"), 
      v.literal("corporate"),
      v.literal("enterprise")
    ),
    status: v.union(
      v.literal("active"),
      v.literal("canceled"),
      v.literal("past_due"),
      v.literal("trialing")
    ),
    stripeSubscriptionId: v.optional(v.string()),
    stripeCustomerId: v.optional(v.string()),
    currentPeriodStart: v.number(),
    currentPeriodEnd: v.number(),
    monthlyRevenue: v.number(), // Revenue in cents
    features: v.object({
      plotSizeLimit: v.object({ width: v.number(), depth: v.number() }),
      aiCredits: v.number(),
      customModels: v.number(),
      businessIntelligence: v.boolean(),
      prioritySupport: v.boolean(),
      apiAccess: v.boolean(),
      virtualEvents: v.boolean(),
      customAI: v.boolean()
    }),
    createdAt: v.number(),
    updatedAt: v.number()
  })
  .index("by_userId", ["userId"])
  .index("by_stripeSubscriptionId", ["stripeSubscriptionId"]),

  // AI interactions and lead generation
  aiInteractions: defineTable({
    plotId: v.id("plots"),
    visitorId: v.string(), // Anonymous visitor ID
    sessionId: v.string(),
    message: v.string(),
    response: v.string(),
    intent: v.optional(v.string()), // "inquiry", "purchase", "support", etc.
    leadScore: v.number(), // 0-100 lead quality score
    sentiment: v.optional(v.string()), // "positive", "neutral", "negative"
    timestamp: v.number()
  })
  .index("by_plotId_timestamp", ["plotId", "timestamp"])
  .index("by_visitorId", ["visitorId"]),

  // Qualified leads generated by AI
  leads: defineTable({
    plotId: v.id("plots"),
    visitorId: v.string(),
    email: v.optional(v.string()),
    phone: v.optional(v.string()),
    company: v.optional(v.string()),
    name: v.optional(v.string()),
    interest: v.string(),
    budget: v.optional(v.string()),
    timeline: v.optional(v.string()),
    score: v.number(), // Lead quality score 0-100
    quality: v.string(), // "hot", "warm", "cold"
    source: v.string(), // "ai_chat", "form", "direct"
    status: v.string(), // "new", "contacted", "qualified", "converted", "lost"
    notes: v.optional(v.string()),
    followUpDate: v.optional(v.number()),
    metadata: v.optional(v.any()), // Added metadata field for tags and other custom data
    createdAt: v.number(),
    updatedAt: v.number()
  })
  .index("by_plotId_quality", ["plotId", "quality"])
  .index("by_status", ["status"]),

  // Revenue events and tracking
  revenueEvents: defineTable({
    plotId: v.id("plots"),
    userId: v.string(),
    type: v.string(), // "subscription", "lead_generation", "marketplace", "ai_service"
    amount: v.number(), // Amount in cents
    description: v.string(),
    leadId: v.optional(v.id("leads")),
    metadata: v.optional(v.any()),
    timestamp: v.number()
  })
  .index("by_plotId_timestamp", ["plotId", "timestamp"])
  .index("by_userId_type", ["userId", "type"]),

  // Business analytics and insights
  analytics: defineTable({
    plotId: v.id("plots"),
    date: v.string(), // YYYY-MM-DD format
    visitors: v.number(),
    interactions: v.number(),
    leadsGenerated: v.number(),
    conversionRate: v.number(),
    revenue: v.number(), // Revenue in cents
    avgSessionTime: v.number(), // In seconds
    topPages: v.array(v.string()),
    trafficSources: v.object({
      direct: v.number(),
      search: v.number(),
      social: v.number(),
      referral: v.number()
    })
  })
  .index("by_plotId_date", ["plotId", "date"]),

  plots: defineTable({
    // Owner information
    userId: v.string(),
    username: v.string(),
    
    // Plot location and size
    position: v.object({
      x: v.number(),
      z: v.number(),
    }),
    size: v.object({
      width: v.number(),
      depth: v.number(),
    }),

    // MetroSpace Address System
    address: v.optional(v.object({ // Made optional to support existing documents
      street: v.string(),
      city: v.string(),
      state: v.string(),
      zipCode: v.string(),
      country: v.string(),
      coordinates: v.object({
        lat: v.number(),
        lng: v.number(),
      }),
    })),

    // Mailbox System
    mailbox: v.optional(v.object({ // Made optional to support existing documents
      enabled: v.boolean(),
      address: v.optional(v.string()), // Unique address for this plot's mailbox
      type: v.optional(v.string()), // "basic", "business", "enterprise"
      autoResponder: v.optional(v.boolean()),
      customGreeting: v.optional(v.string()),
      publicContact: v.object({
        email: v.optional(v.string()),
        phone: v.optional(v.string()),
        website: v.optional(v.string()),
      }),
    })),
    
    // Main building configuration
    mainBuilding: v.object({
      type: v.string(), // building style/type
      height: v.number(),
      color: v.string(),
      rotation: v.number(),
      customizations: v.optional(v.any()), // Additional customizations
    }),
    
    // Optional garden
    garden: v.optional(v.object({
      enabled: v.boolean(),
      style: v.string(),
      elements: v.array(v.string()),
    })),
    
    // Optional sub-buildings (like cafe, studio, gallery)
    subBuildings: v.optional(v.array(
      v.object({
        type: v.string(),
        position: v.object({
          x: v.number(),
          z: v.number(),
        }),
        rotation: v.number(),
        size: v.number(),
        color: v.string(),
        customizations: v.optional(v.any()),
      })
    )),
    
    // Creator information and description
    creatorInfo: v.optional(v.string()),
    description: v.optional(v.string()),
    
    // Pricing and payment information
    pricing: v.object({
      totalCost: v.number(), // Total cost in USD cents
      freeSquares: v.number(), // Number of free squares used
      paidSquares: v.number(), // Number of paid squares
      pricePerSquare: v.number(), // Price per square in USD cents
    }),
    
    // Payment status
    paymentStatus: v.string(), // "pending", "paid", "free"
    paymentId: v.optional(v.string()), // Payment processor transaction ID
    
    // Custom 3D model support
    customModel: v.optional(v.object({
      enabled: v.boolean(),
      modelUrl: v.optional(v.string()), // URL to uploaded GLB/GLTF file
      modelType: v.optional(v.string()), // "glb" or "gltf"
      uploadedAt: v.optional(v.number()),
    })),
    
    // Enhanced advertising system
    advertising: v.optional(v.object({
      companyName: v.string(),
      website: v.optional(v.string()),
      logoUrl: v.optional(v.string()),
      description: v.string(),
      contact: v.object({
        email: v.string(),
        phone: v.optional(v.string()),
      }),
      industry: v.string(),
      services: v.string(),
      socialMedia: v.object({
        linkedin: v.optional(v.string()),
        twitter: v.optional(v.string()),
        facebook: v.optional(v.string()),
        instagram: v.optional(v.string()),
      }),
      businessHours: v.union(
        v.string(),
        v.object({
          schedule: v.array(v.object({
            day: v.string(),
            open: v.string(),
            close: v.string(),
            closed: v.boolean(),
          })),
          timezone: v.string(),
        })
      ),
    })),

    // AI-powered features
    aiFeatures: v.optional(v.object({
      chatbot: v.boolean(),
      autoResponder: v.boolean(),
      leadCapture: v.boolean(),
      businessIntelligence: v.boolean(),
      personality: v.optional(v.string()), // "professional", "friendly", "casual", "technical"
      customPrompts: v.optional(v.string()),
    })),

    // Company information
    companyInfo: v.optional(v.object({
      companyName: v.string(),
      website: v.string(),
      logoSvg: v.string(),
      shortDescription: v.string(),
      uploadedAt: v.optional(v.number()),
    })),
    
    createdAt: v.number(),
    updatedAt: v.number(),
  })
  .index("by_mailbox_address", ["mailbox.address"]), // To query plots by their unique mailbox address
  
  // Enhanced user accounts for MetroSpace
  users: defineTable({
    userId: v.string(), // Clerk user ID
    username: v.string(),
    email: v.string(),
    
    // Account balance and credits
    credits: v.number(), // Available credits in USD cents
    totalSpent: v.number(), // Total amount spent
    lifetimeValue: v.optional(v.number()), // Total revenue generated from user
    
    // Current subscription info
    currentSubscription: v.optional(v.id("subscriptions")),
    subscriptionTier: v.string(), // "free", "startup", "business", "corporate", "enterprise"
    
    // Usage tracking
    freeSquaresUsed: v.number(),
    freeSquaresLimit: v.number(), // Default: 25 (5x5 plot)
    aiCreditsUsed: v.optional(v.number()),
    aiCreditsLimit: v.optional(v.number()),
    
    // Business profile
    businessProfile: v.optional(v.object({
      companyName: v.optional(v.string()),
      industry: v.optional(v.string()),
      companySize: v.optional(v.string()), // "1-10", "11-50", "51-200", "201-1000", "1000+"
      website: v.optional(v.string()),
      phone: v.optional(v.string()),
      address: v.optional(v.string()),
      description: v.optional(v.string())
    })),
    
    // Preferences and settings
    preferences: v.optional(v.object({
      emailNotifications: v.boolean(),
      marketingEmails: v.boolean(),
      aiPersonality: v.string(), // "professional", "friendly", "technical"
      timezone: v.string(),
      language: v.string()
    })),
    
    // Onboarding and engagement
    onboardingCompleted: v.optional(v.boolean()),
    lastLoginAt: v.optional(v.number()),
    loginCount: v.optional(v.number()),
    
    createdAt: v.number(),
    updatedAt: v.number(),
  })
  .index("by_email", ["email"])
  .index("by_subscriptionTier", ["subscriptionTier"]),
  
  // Payment transactions
  transactions: defineTable({
    userId: v.string(),
    plotId: v.optional(v.id("plots")),
    
    // Transaction details
    amount: v.number(), // Amount in USD cents
    currency: v.string(), // "USD"
    type: v.string(), // "plot_purchase", "credit_purchase", "model_upload"
    
    // Payment processor info
    paymentProcessor: v.string(), // "stripe", "paypal", etc.
    transactionId: v.string(),
    status: v.string(), // "pending", "completed", "failed", "refunded"
    
    // Additional metadata
    metadata: v.optional(v.any()),
    
    createdAt: v.number(),
    updatedAt: v.number(),
  }), // End of transactions table
  mailMessages: defineTable({
    plotId: v.id("plots"), // The plot this message belongs to
    senderUserId: v.optional(v.string()), // Clerk User ID of the sender, if applicable
    senderDisplayName: v.string(), // Display name of the sender (e.g., "John Doe" or "System")
    recipientPlotAddress: v.string(), // The unique mailbox address of the recipient plot
    subject: v.string(),
    body: v.string(),
    timestamp: v.number(),
    isRead: v.boolean(),
    messageType: v.optional(v.string()), // e.g., "user_message", "system_notification", "plot_reply"
  })
  .index("by_plotId_timestamp", ["plotId", "timestamp"]) // To efficiently query messages for a plot, sorted by time
  .index("by_recipientPlotAddress", ["recipientPlotAddress"]), // To query messages by the plot's mailbox address

  // Building click tracking
  buildingClicks: defineTable({
    plotId: v.id("plots"),
    visitorId: v.string(), // Anonymous visitor ID
    sessionId: v.string(), // Session identifier
    timestamp: v.number(),
    userAgent: v.optional(v.string()),
    referrer: v.optional(v.string())
  })
  .index("by_plotId_timestamp", ["plotId", "timestamp"])
  .index("by_visitorId", ["visitorId"])
  .index("by_sessionId", ["sessionId"]),

  // Website visit tracking
  websiteVisits: defineTable({
    plotId: v.id("plots"),
    visitorId: v.string(), // Anonymous visitor ID
    sessionId: v.string(), // Session identifier
    websiteUrl: v.string(), // The website URL that was visited
    timestamp: v.number(),
    userAgent: v.optional(v.string()),
    referrer: v.optional(v.string())
  })
  .index("by_plotId_timestamp", ["plotId", "timestamp"])
  .index("by_visitorId", ["visitorId"])
  .index("by_sessionId", ["sessionId"])
}); // End of defineSchema